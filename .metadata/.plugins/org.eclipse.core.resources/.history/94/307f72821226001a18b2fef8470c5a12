package com.creditcard.creditcards.service;

import java.util.Optional;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.MockitoJUnitRunner;

import com.creditcard.creditcards.constant.Constant;
import com.creditcard.creditcards.dto.LoginResponseDto;
import com.creditcard.creditcards.dto.UserLogin;
import com.creditcard.creditcards.entity.User;
import com.creditcard.creditcards.exception.UserNotFoundException;
import com.creditcard.creditcards.repository.LoginRepository;

@RunWith(MockitoJUnitRunner.Silent.class)
public class LoginServiceTest {
	
	@InjectMocks
	LoginServiceImpl loginServiceImpl;
	
	@Mock
    LoginRepository loginRepository;
	
	@Test
	public void testLoginUser() throws UserNotFoundException{
		LoginResponseDto loginResponseDto = new LoginResponseDto();
		loginResponseDto.setMessage(Constant.USER_FOUND);
		loginResponseDto.setName("nivi");
		loginResponseDto.setStatusCode(200);
		loginResponseDto.setUserId(1L);
		User user=new User();
		user.setName("nivi");
		user.setUserId(1L);
		UserLogin userLogin=new UserLogin();
		userLogin.setPassword("123");
		userLogin.setUserName("nivi");
		Mockito.when(loginRepository.findByUserNameAndPassword("nivi", "123")).thenReturn(Optional.of(user));
	}
    
	@Test
	public void testLoginUserForUserNotFound() {
		LoginResponseDto loginResponseDto = new LoginResponseDto();
		loginResponseDto.setMessage(Constant.USER_NOT_FOUND);
		loginResponseDto.setName("nivi");
		loginResponseDto.setStatusCode(200);
		loginResponseDto.setUserId(1L);
		User user=new User();
		user.setName("nivi");
		user.setUserId(1L);
		UserLogin userLogin=new UserLogin();
		userLogin.setPassword("123");
		userLogin.setUserName("nivi");
		Mockito.when(loginRepository.findByUserNameAndPassword("nivi", "123")).thenReturn(Optional.of(user));
		
	}

}
